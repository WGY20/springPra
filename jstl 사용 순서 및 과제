※ java jdk 1.8, apache Tomcat 8.5, Spring Vesion 5.2.4

0강. sts-3.9.14.RELEASE 프로젝트 셋팅하기
1. sts-3.9.14.RELEASE 설치하기
 - 해당 파일을 적당한 위치에 압축을 푼다.(반디집으로 풀기 > 폴더명이 길어서 알집으로 풀면 오류가 생김)
 - workspace 폴더를 생성 후 초기 설치시에 사용할 workspace 폴더로 지정한다.
 - apache Tomcat 8.5 버전을 다운로드 한 후 workspace - server 폴더에 이동시킨다.

2. workspace - .metadata - plugins - org.springsource.ide.eclipse.commons.content.core
   안에  https-content.xml 파일 붙여 넣기

3. workspace - .metadata - .sts 폴더에 content 폴더를 생성한다.
   content 폴더 안으로 이동해서 org.springframework.templates.mvc-3.2.2.zip 파일을 
   ⓐ org.springframework.templates.mvc-3.2.2에 압축풀기 선택
   ⓑ 압축풀기
   ⓒ 해당 폴더에는 
      - template.xml
      - template.zip
      - wizard.json 
 세개의 파일이 보이면 성공

4. 해당 sts.exe 파일을 오른쪽 마우스로 선택한 후 작업표시줄에 고정한다.
5. sts 로 돌아가서 new 를 선택하면 MVC Project 생성 확인 가능

1강. MVC 프로젝트 생성하기. 
1. MVC 프로젝트 생성하기
 workspace - .metadata - plugins - org.springsource.ide.eclipse.commons.content.core
   안에  https-content.xml 파일 붙여 넣기

2. workspace - .metadata - sts 폴더에 content 폴더를 생성한다.
   org.springframework.templates.mvc-3.2.2.zip 파일을 
   ⓐ org.springframework.templates.mvc-3.2.2에 압축풀기 선택
   ⓑ 압축풀기
   ⓒ 해당 폴더에는 
      - template.xml
      - template.zip
      - wizard.json 
 세개의 파일이 보이면 성공

3. sts 로 돌아가서 new 를 선택하면 MVC Project 생성 확인 가능

2강. 환경설정 및 구조 이해하기
1. 폰트 및 기타 설정하기
ⓐ 실행 브라우저 변경하기 
- Window - Preferences - General - Web Browser - Use External Web Browser - Chrome check

ⓑ 정확한 파일의 경로 얻기 : 해당 파일 우측버튼 Copy Qualified Name ---> 임의 장소에 붙여 넣고 사용하기

ⓒ UTF-8 셋팅 - Windows - Preferences
- General - Workspace - 좌측 하단 - Text File encoding - UTF-8
- Web 
	CSS Files
	HTML Files	
	JSP Files 
- General - content type - Spring properties File - UTF-8

ⓓ Project Window 보이게 하기
- Window - Shwo View - Project Explorer


3. MVC 구조 이해하기

▶ pom.xml / web.xml / Servlet-Context.xml

ⓐ pom.xml
 - 생성한 프로젝트에 필요한 환경설정 및 의존성을 정의 해 주는 파일
 - Spring Boot Build.gradle과 같은 역할 수행
7행 : 프로젝트 이름
11행 : 프로젝트에 사용되는 자바버전  1.6 ---> 1.8
12행 : 스프링버전 명시 3.1.1.  -->  5.2.4
30행-34행 : 스프링 MVC 프레임워크와 관련된 라이브러리를 메인 리포지터리에서 다운로드
94행-110행 : 웹 프로젝트에 필요한 서블릿 관련 라이브러리 다운로드
120행-157행 : 프로젝트를 빌드하기 위한 설정

ⓑ web.xml
 - WAS(ex:Tomcat)이 처음 실행 될 때 web.xml 파일을 제일 먼저 읽고 내부에 정의된 구성대로 프로젝트를 설정
 - 내 Spring Project의 구성을 설정하는 파일
 - 여러 xml 파일을 인식할 수 있도록 각 파일을 가리키는 역할 수행
18행-26행 : appServlet 이라는 별칭을 사용해서 DispatcherServlet 객체를 서블릿으로 등록
21행-24행 : contextConfigLocation라는 이름으로 servlet-context.xml 을 설정
28행-31행 : appServlet으로 등록된 DispatcherServlet을 / 로 매핑

ⓒ Servlet-Context.xml
 - DispatcherServlet 에 관련 설정을 기록하는 파일

13행 : <annotation-driven /> @Controller 애너테이션이 명시되어 있는 클래스를 Controller 객체로 등록
16행 : Jsp 파일을 제외한 HTML, CSS, JS 파일과 이미지 파일을 위한 [resources] 폴더 지정
19행-22행 : 뷰에 해당하는 jsp 파일을 검색하기 위해 InternalResourceViewResolver 객체 생성
24행 : com.company.hello 패키지 하위에 있는 모든 컴포넌트등를 사용할 수 있도록 스캔

<resources mapping="/resources/**" location="/resources/" />
물리적인 파일 index.html 의 위치 : /resources/index.html
--> localhost:8090/context명/resources/index.html --> localhost:8090/hello/resources/index.html

<beans:property name="prefix" value="/WEB-INF/views/" /> : JSP 파일의 위치

4. web.xml 에 한글 필터 설정

	<!--  문자 인코딩  시작 한글-->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>
		  org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
		  <param-name>encoding</param-name>
		  <param-value>UTF-8</param-value>
		</init-param>
		<init-param>
		  <param-name>forceEncoding</param-name>
		  <param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--  문자 인코딩  끝 -->

5. 위 필터 처리 안될 경우 D:\apache\apache-tomcat-8.5.100\conf 파일 내에 server.xml
   
   <Connector executor="tomcatThreadPool"
               port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
	  URIEncoding="UTF-8"
               redirectPort="8443"
               maxParameterCount="1000"
	/>

	여기에도 추가하기

3강. MVC 프로젝트에  mybatis 설정하고 테스트하기
1. 프로젝트 생성(java 1.8, spring 5.2.4 tomcat 8.5)
2. 서버 톰캣 설정 : 서버 안보일 때 windows - Show View - others - server - servers 더블클릭
    - 시작 경로 설정 : 기본 localhost:8090/app   ---> localhost:8090/ 이렇게 바꿀 수 있다.   
    - 처음 프로젝트 시작 시 서버설정도 여기서 함.  -- 해당 톰캣 버전 더블클릭 후 처리...

3. pom.xml에 dependency 설정
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>kr.co</groupId>
	<artifactId>zzz</artifactId>
	<name>mvcProject_01</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>5.2.4.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
				
		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>  
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.2</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
		<dependency>
		    <groupId>org.postgresql</groupId>
		    <artifactId>postgresql</artifactId>
		    <version>42.6.0</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2 -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-dbcp2</artifactId>
		    <version>2.7.0</version>
		</dependency>   
		<dependency>
		<groupId>org.projectlombok</groupId>
		<artifactId>lombok</artifactId>
		<version>1.18.30</version>
		<scope>provided</scope>
	</dependency>  

	<!-- ==========================  -->	
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis</artifactId>
		<version>3.5.4</version>
	</dependency>
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis-spring</artifactId>
		<version>2.0.4</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-jdbc</artifactId>
		<version>${org.springframework-version}</version>
	</dependency>
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-dbcp2</artifactId>
		<version>2.7.0</version>
	</dependency>
	<dependency>
		<groupId>org.postgresql</groupId>
		<artifactId>postgresql</artifactId>
		<version>42.6.0</version>
	</dependency>			
	<!-- ==========================  -->


	</dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>


4. Lombok 설치하기
ⓐ dependency 추가 : maven repository --> Project Lombok » 1.18.30	
ⓑ https://projectlombok.org/download  --> lombok.jar OK!!

ⓒ 다운로드 받은 lombok.jar 파일을 STS(Spring Tool Suite) 설치파일이 있는 곳으로 옮김.
--> F:\sts-bundle\sts-3.9.14.RELEASE

ⓓ STS에 Lombok 연동 -> 명령 프롬프트 창을 관리자 권한으로 실행
	- 해당 폴더로 이동 --> java -jar lombok.jar
	- 설치 화면이 나오면 자동으로 경로를 잡는다. ---> Install  ---> Quit Installer 눌러서 종료
ⓔ 롬복 설치 후에 STS가 실행중인 상태라면 STS를 재실행 시켜주시면 설치는 완료

5. 처리확인
 -  해당 프로젝트 우클릭 maven - Update Project ----> 1.8 변경 확인
 

6. rootContext.xml 수정  

--- db name : testdb, user:postgres,  pw : 1111
--- table name : test   id varchar  name varchar    ( 1, 장원영)  입력

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
</beans>


7. mybatis-context.xml 만들기
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.postgresql.Driver"/>
		<property name="url" value="jdbc:postgresql://localhost:5432/testdb"/>
		<property name="username" value="postgres"/>
		<property name="password" value="1111"/>
	</bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:config/mybatis-config.xml" />
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="kr.co.zzz.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
</beans>

8. resources > config : mybatis-config.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<settings>
		<setting name="mapUnderscoreToCamelCase" value="true" />
	</settings>
    
	<typeAliases>
        <typeAlias type="kr.co.zzz.dto.AdminDto" alias="adminDto"></typeAlias>
	</typeAliases>
</configuration>

9. web.xml 에 mybatis-context.xml 추가해 주기
<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/root-context.xml
			/WEB-INF/spring/security-context.xml
			/WEB-INF/spring/mybatis-context.xml
		</param-value>
	</context-param>

4강. 이클립스 기본 단축키
- Ctrl + Shift + c : jsp 주석처리
- Ctrl + Shift + F : 소스코드 자동 정리
- Ctrl + Shift + O : 소스에 필요한 패키지를 자동으로 Import 시키기
- Ctrl + Alt + up/down : 한줄 duplicate
- Ctrl + F11 : 실행
- Ctrl + D : 한줄삭제
- Alt + UP,DOWN : 현재 줄 위치 이동

5강. 로그인 및 회원관리 페이지 프로그램 만들기

1. 메인화면 만들기

▶ main.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<ul>
		<li><a href="<c:url value='/admin/loginForm'/>">로그인</a></li>
		<li><a href="<c:url value='/admin/createAccountForm'/>">회원가입</a></li>
	</ul>
</body>
</html>

▶ AdminController

@Controller
@RequestMapping("/admin")
public class AdminController {

	@GetMapping("")
	public String mainView() {
		return "main";
	}
}

2. 회원가입페이지 만들고 DB에 저장하기

▶ AdminDto 만들기

@Data
@ToString
public class AdminDto {
	private String a_id;
	private String a_pw;
	private String a_name;
	private String a_phone;
	private int a_approval;
}

※ mybatis-config.xml 에 추가하기

<typeAliases>
        <typeAlias type="kr.co.zzz.dto.AdminDto" alias="adminDto"></typeAlias>
</typeAliases>


▶ create_account_form.Jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h2>Sign Up</h2>
	<form action="<c:url value='/admin/createAccountConfirm' />" method="post"><br>
		<input type="text" name="a_id" placeholder="Input Admin ID"/><br>
		<input type="text" name="a_pw" placeholder="Input Admin PW"/><br>
		<input type="text" name="a_pw_again" placeholder="Input Admin Again"/><br>
		<input type="text" name="a_name" placeholder="Input Admin Name"/><br>
		<input type="text" name="a_phone" placeholder="Input Phone"/><br>
		<input type="submit" value="create account">
		<input type="reset" value="reset">
	</form>
</body>
</body>
</html>

▶ AdminController Controller 만들기

	@Autowired
	AdminService adminService;

	@GetMapping("/createAccountForm")
	public String createAccountForm() {
		return "/admin/create_account_form";
	}
	
	@PostMapping("/createAccountConfirm")
	public String insertAdminAccount(AdminDto adminDto) {
		System.out.println(adminDto.toString());
		adminService.adminInsert(adminDto);
		return "admin/admin_list";
	}



▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶

- 비밀번호 암호화 처리를 위한 PasswordEncoder 설정하기

ⓐ pom.xml 추가하기
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-core</artifactId>
		<version>${org.springframework-version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-config</artifactId>
		<version>${org.springframework-version}</version>
		</dependency>
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-web</artifactId>
		<version>${org.springframework-version}</version>
	</dependency>

ⓑ webapp > WEB-INF > spring > security-context.xml 파일 만들기

ⓒ spring 폴더 우측 마우스 버튼 > Spring Bean configuration File > bean, security check

ⓓ 나머지 부분 입력

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security.xsd">

	<bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
</beans>

ⓔ web.xml 추가하기
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/root-context.xml
			/WEB-INF/spring/security-context.xml
		</param-value>
	</context-param>

▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶▶

▶ AdminService 만들기

@Service
public class AdminService{
	@Autowired
	AdminMapper mapper;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	public int adminInsert(AdminDto adminDto) {
		adminDto.setA_pw(passwordEncoder.encode(adminDto.getA_pw()));
		return mapper.adminInsert(adminDto);
	}

	public AdminDto loginConfirm(AdminDto adminDto) {
		return mapper.loginConfirm(adminDto);
	}

}

▶ AdminMapper Interface 만들기

@Mapper
public interface AdminMapper {
	int adminInsert(@Param("adminDto")AdminDto adminDto);

	AdminDto loginConfirm(@Param("adminDto") AdminDto adminDto);
}

▶ resources > mapper 폴더 만들고  admin_sql.xml 만들기

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE  mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.zzz.admin">
	<insert id="adminInsert" parameterType="adminDto">
		INSERT INTO admin (a_id, a_pw, a_name, a_phone)
		VALUES(#{adminDto.a_id},#{adminDto.a_pw},#{adminDto.a_name}, #{adminDto.a_phone})
	</insert>
</mapper>


3. 로그인 화면 만들고 처리하기

▶ login_form.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<form action="<c:url value='/admin/loginConfirm' />" name="login_form" method="post">
		<input type="text" name="a_id" placeholder="Input Admin ID"><br>
        <input type="password" name="a_pw" placeholder="Input Admin PW"><br>
        <input type="submit" value="login">
        <input type="reset" value="reset">
	</form>
</body>
</html>

▶ Controller 만들기

	@GetMapping("/loginForm")
	public String loginForm() {
		return "/admin/login_form";
	}

	@PostMapping("/loginConfirm")
	public String loginConfirm(AdminDto adminDto) {
		System.out.println(adminDto.toString());
		
		String nextPage = "/admin/login_ok";
		
		AdminDto adminLoginedDto = adminService.loginConfirm(adminDto);
		
		if(adminLoginedDto == null) {
			System.out.println("유저 존재하지 않음");
			nextPage = "/admin/login_ng";
			System.out.println("nextPage " + nextPage);
		}
		return nextPage;
	}

▶ adminService.loginConfirm(adminDto) 만들기

	public AdminDto loginConfirm(AdminDto adminDto) {
		System.out.println(adminDto.toString());
		AdminDto dto = new AdminDto();
		dto = mapper.loginConfirm(adminDto);
		return dto;
	}


▶ mapper.loginConfirm(adminDto) 만들기

AdminDto loginConfirm(@Param("adminDto") AdminDto adminDto);

▶ loginConfirm xml 쿼리 만들기

	<select id="loginConfirm" parameterType="adminDto" resultType="adminDto">
		SELECT a_id, a_pw, a_name, a_phone, a_approval FROM admin
		WHERE a_id = #{adminDto.a_id}
	</select>

	
4. 관리자 로그인 처리하기(id, password) 및 a_approval > 0 확인하기
ⓐ 회원가입 시 id가 admin 으로 입력되면 a_approval 값을 1로 setting 나머지는 0
 - 다른 회원들은 관리자가 승인을 처리해야 즉, a_approval 값을 admin이 "1"로 변경해야 서비스 이용이 가능하다.

▶ 회원가입 처리 서비스 수정

---  AdminService
public int adminInsert(AdminDto adminDto) {
		adminDto.setA_pw(passwordEncoder.encode(adminDto.getA_pw()));
		if(adminDto.getA_id().equals("admin")) {
			adminDto.setA_approval(1);
		}
		return mapper.adminInsert(adminDto);
}

--- 쿼리 수정

<insert id="adminInsert" parameterType="adminDto">
		INSERT INTO admin (a_id, a_pw, a_name, a_phone, a_approval)
		VALUES(#{adminDto.a_id},#{adminDto.a_pw},#{adminDto.a_name}, 
					#{adminDto.a_phone}, #{adminDto.a_approval})
</insert>

ⓑ 로그인 아이디와 암호화된 비밀번호를 비교하여 로그인 성공과 실패 페이지를 보여준다.
--- 쿼리 수정(id와 a_approval값이 0 이상인 레코드를 검색한다.)

	<select id="loginConfirm" parameterType="adminDto" resultType="kr.co.zzz.dto.AdminDto">
		SELECT a_id, a_pw, a_name, a_phone, a_approval FROM admin
		WHERE a_id = #{adminDto.a_id} AND a_approval > 0
	</select>

--- Controller 수정

	if(adminLoginedDto == null) {
		System.out.println("유저 존재하지 않음");
		nextPage = "/admin/login_ng";
		System.out.println("nextPage " + nextPage);
	} else {
		if(! passwordEncoder.matches(adminDto.getA_pw(), adminLoginedDto.getA_pw())) {
			nextPage = "/admin/login_ng";
		}
		return nextPage;
	}
	return nextPage;

ⓒ 로그인 성공 및 실패 View 수정

--- login_ok.jsp
	<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
	<body>
		<h1>Admin Login OK!</h1>
		<ul>
			<li><a href="<c:url value='/admin/logout'/>">LOG OUT</a></li>
			<li><a href="<c:url value='/admin/modifyAccountForm'/>">Modify Account</a></li>
		</ul>
	</body>

--- login_ng.jsp
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

	<h1>Login Failed!!</h1>
	<h3>만약 관리자 회원가입을 했다면, 최고 관리자한테 승인 요청 후 로그인 하세요.</h3>
	<ul>
		<li><a href="<c:url value='/admin/createAccountForm'/>">Create
				Account</a></li>
		<li><a href="<c:url value='/admin/loginForm'/>">Login</a></li>
	</ul>

5. 로그인 세션 처리하기(관리자 로그인 상태 유지하기)

--- Controller > loginConfirm Method 수정

public String loginConfirm(AdminDto adminDto, HttpSession session) {

	if(! passwordEncoder.matches(adminDto.getA_pw(), adminLoginedDto.getA_pw())) {
		nextPage = "/admin/login_ng";
		return nextPage;
	} else {
		session.setAttribute("adminLoginedDto", adminLoginedDto);
		session.setMaxInactiveInterval(60*30); // 60초 * 30 = 30분
		return nextPage;
	}
}


6. 로그인에 따른 화면 처리하기(관리자 및 일반 회원)

--- login_ok.jsp 수정

<body>
	<h1>Admin Login OK!</h1>
	<jsp:include page="./nav.jsp"></jsp:include>
</body>

--- nav.jsp 만들기

<%@ page import="kr.co.zzz.dto.AdminDto" %>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<%
    AdminDto adminLoginedDto = (AdminDto) session.getAttribute("adminLoginedDto");
    if(adminLoginedDto != null){
    // 로그인 후
%>
    <ul>
        <li><a href="<c:url value='/admin/logoutConfirm'/>">LOG OUT</a></li>
        <li><a href="<c:url value='/admin/modifyAccountForm'/>">Modify Account</a></li>
        <c:if test="${adminLoginedDto.a_id eq 'admin'}">
            <li><a href="<c:url value='/admin/listupAdmin' />">관리자 목록</a></li>
        </c:if>
        <li><a href="<c:url value='/admin/getAllBooks' />" >전체 도서</a></li>
        <li><a href="<c:url value='/admin/registerBookForm' />" >도서등록</a></li>
    </ul>
<%
    } else {
    // 로그인 전
%>
    <ul>
        <li><a href="<c:url value='/admin/createAccountForm'/>">Create
                Account</a></li>
        <li><a href="<c:url value='/admin/loginForm'/>">Login</a></li>
    </ul>
<%
    }
%>


7. 관리자 로그아웃 처리하기( session.invalidate() )

▶ Controller 에 /admin/logout GetMapping 만들기

@GetMapping("/logoutConfirm")
public String logoutConfirm(HttpSession session) {
	String nextPage = "redirect:/admin";
	session.invalidate();
	return nextPage;
}

8. 일반 관리자 목록 조회하기

▶ Controller 에 /admin/listupAdmin GetMapping 만들기

@GetMapping("listupAdmin")
public String listupAdmin(Model model) {
	String nextPage = "admin/admin_list";
	
	List<AdminDto> adminDtos = adminService.adminList();
	model.addAttribute("adminDtos", adminDtos);
	return nextPage;
}

▶ AdminService에 adminService.adminList() 만들기

	public List<AdminDto> adminList() {
		return mapper.adminList();
	}


▶ interface AdminMapper에 mapper.adminList() 만들기

	List<AdminDto> adminList();

▶ admin_sql.xml에 쿼리 만들기

<select id="adminList" parameterType="adminDto" resultType="adminDto">
	SELECT a_id, a_pw, a_name, a_phone, a_approval FROM admin
</select>

▶ admin_list.jsp 만들기

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
</head>
<body>
	<jsp:include page="./nav.jsp" />	
        <h3>ADMIN LIST</h3>
        <br>
        <table border="1">
            <thead>
                <tr>
                    <th>계정</th>
                    <th>이름</th>
                    <th>연락처</th>
                    <th>승인</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach var="dto" items="${adminDtos}">
                    <tr>
                        <td>${dto.a_id}</td>
                        <td>${dto.a_name}</td>
                        <td>${dto.a_phone}</td>
                        <td>
                            <c:choose>
                                <c:when test="${dto.a_approval eq 0}">
                                    <c:url value='/admin/setAdminApproval' var='approval_url'>
                                        <c:param name='id' value='${dto.a_id}'/>
                                    </c:url>
                                    <a href="${approval_url}">승인처리</a>
                                    <!-- http://localhost:8080/admin/setAdminApproval?id=vizolmin -->									
                                </c:when>
                                <c:when test="${dto.a_approval eq 1}"> <c:out value="승인완료" /> </c:when>
                            </c:choose>
                        </td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
</body>
</html>


9. 일반 관리자 승인하기

▶ Controller 에 /admin/setAdminApproval GetMapping 만들기

	@GetMapping("/setAdminApproval")
	public String setAdminApproval(@RequestParam("id")String id) {
		String nextPage = "redirect:/admin/listupAdmin";
		
		int result = adminService.updateAdminAccount(id);
		return nextPage;
	}

▶ AdminService에 adminService.updateAdminAccount(id) 만들기

	public int updateAdminAccount(String id) {
		return mapper.updateAdminAccount(id);
	}	

▶ interface AdminMapper에 mapper.updateAdminAccount(id) 만들기

	int updateAdminAccount(String id);

▶ admin_sql.xml에 Update 쿼리 만들기

	<update id="updateAdminAccount" parameterType="String">
		UPDATE admin SET a_approval = 1
		WHERE a_id = #{id}
	</update>

▶ 일반관리자로 로그인 후 메뉴 살펴보기

10. 관리자 계정 수정 폼 보이기

▶ Controller 에 /admin/modifyAccountForm GetMapping 만들기

	@GetMapping("/modifyAccountForm")
	public String modifyAccountForm(HttpSession session) {
		String nextPage = "/admin/modify_account_form";
		
		AdminDto adminDto = (AdminDto)session.getAttribute("adminLoginedDto");
		if(adminDto == null) {
			nextPage = "redirect:/admin/loginForm";
		}
		return nextPage;
	}

▶ /admin/modify_account_form.jsp 만들기

<%@page import="kr.co.zzz.dto.AdminDto"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
</head>
<body>	
	<jsp:include page="./nav.jsp" />	

    <h3>MODIFY ACCOUNT FORM</h3>
    <form action="<c:url value='/admin/modifyAccountConfirm' />" name="modify_account_form" method="post">    
		<input type="hidden" name="a_id" value="${adminLoginedDto.a_id}">      
        <input type="text" name="a_id" value="${adminLoginedDto.a_id}" readonly disabled> <br>
        <input type="password" name="a_pw" value="******" readonly disabled> <br>
        <input type="text" name="a_name" value="${adminLoginedDto.a_name}" placeholder="INPUT USER NAME."> <br>
        <input type="text"	name="a_phone" value="${adminLoginedDto.a_phone}" placeholder="INPUT USER PHONE."> <br>
        <input type="submit" value="modify account"> 
        <input type="reset"	value="reset">        
    </form>
</body>
</html>



11. 관리자 계정 수정 처리하기

▶ Controller 에 /admin/modifyAccountForm PostMapping 만들기

	@PostMapping("/modifyAccountConfirm")
	public String modifyAccountConfirm(AdminDto adminDto, HttpSession session) {
		
		String nextPage = "redirect:/admin/listupAdmin";
		
		int result = adminService.modifyAccountConfirm(adminDto);
		
		if(result > 0) {
			AdminDto adminLoginedDto = adminService.loginConfirm(adminDto);
			
			session.setAttribute("adminLoginedDto", adminLoginedDto);
			session.setMaxInactiveInterval(60*30);
		} 
		return nextPage;
	}

▶ AdminService에 adminService.modifyAccountConfirm(adminDto) 만들기

	public int modifyAccountConfirm(AdminDto adminDto) {
		return mapper.modifyAccountConfirm(adminDto);
	}

▶ interface AdminMapper에 mapper.modifyAccountConfirm(adminDto) 만들기

	int modifyAccountConfirm(@Param("adminDto") AdminDto adminDto);
	
▶ admin_sql.xml에 Update 쿼리 만들기

	<update id="modifyAccountConfirm" parameterType="adminDto">
		UPDATE admin SET
			a_name = #{adminDto.a_name},
			a_phone = #{adminDto.a_phone}
		WHERE a_id = #{adminDto.a_id}
	</update>


12. 최고 관리자 검색기능 넣기(아이디, 이름, 전화번호, 승인유무)

▶ 관리자리스트를 보는 화면(admin_list.jsp)에 검색 창 추가하기

--- admin_list.jsp

	<h3>ADMIN LIST</h3>

	<br>
	<form action="<c:url value='/admin/searchAdminConfirm' />"
		name="search_admin_form" method="get">
		<select name="category">
			<option value="None">==SelectCategory==</option>
			<option value="Account">Account</option>
			<option value="Name">Name</option>
			<option value="Phone">Phone</option>
		</select> <input type="text" name="keyword" placeholder="Enter Keyword">
		<input type="submit" value="search">
	</form>

▶ Controller 에 /admin/searchAdminConfirm GetMapping 만들기

	@GetMapping("/searchAdminConfirm")
	public String searchAdminConfirm(@RequestParam("keyword")String keyword, 
			@RequestParam("category")String category, Model model) {
		
		String nextPage = "/admin/admin_list";
		
		List<AdminDto> adminDtos = adminService.searchAdmin(category, keyword);
		
		model.addAttribute("adminDtos",adminDtos);
		
		return nextPage;
	}

▶ AdminService에 adminService.searchAdmin(category, keyword) 만들기

	public List<AdminDto> searchAdmin(String category, String keyword) {
		return mapper.searchAdmin(category, keyword);
	}

▶ interface AdminMapper에 mapper.modifyAccountConfirm(adminDto) 만들기

	List<AdminDto> searchAdmin(@Param("category")String category, @Param("keyword")String keyword);
	
▶ admin_sql.xml에 select 쿼리 만들기

	<select id="searchAdmin" parameterType="String" resultType="adminDto">
		SELECT a_id, a_pw, a_name, a_phone, a_approval FROM admin
		<choose>
			<when test='"Name".equals(category)'>
				WHERE a_name LIKE CONCAT('%', #{keyword}, '%')
			</when>
			<when test='"Phone".equals(category)'>
				WHERE a_phone LIKE CONCAT('%', #{keyword}, '%')
			</when>
			<when test='"Account".equals(category)'>
				WHERE a_id LIKE CONCAT('%', #{keyword}, '%')
			</when>
		</choose>
	</select>


13. HandlerInterceptor 인터페이스

---  로그인하지 않은 사용자가 로그인이 필요한 서비스에 접근할 경우 Interceptor를 통해서 로그인 화면으로 이동시키는 방법

--- 기존에는 세션정보를 사용해서 세션 dto 값이 null 인 경우 로그인 화면으로 redirection 했음.

--- HandlerInterceptor 인터페이스 제공 메서드
ⓐ preHandle() : 클라이언트의 요청이 핸들러에 전달되기 이전에 호출. boolean 반환되며, 매개변수로 handler(컨트롤러)를 받으며,
				true를 반환하면 handler가 실행되고, false를 반환하면 handler는 실행하지 않는다.
ⓑ postHandle() : 클라이언트의 요청이 컨트롤러에서 실행 된 후 호출, 예외가 발생되면 postHandle()은 호출되지 않는다.
ⓒ afterCompletion()

※ HandlerInterceptor를 구현해야하는데 모두 구현하면 힘듦으로 HandlerInterceptor를 구현한 HandlerInterceptorAdapter
  클래스를 제공하므로 얘를 상속받아 필요한 것만 구현함.

######## preHandle()을 사용하여 로그인 상태를 구분한 후 인증이 완료된 사용자에게만 웹 서비스를 제공하는 작업을 할 것임.

######## 즉, 인증이 안된 사용자에게는 handler(컨트롤러) 실행을 막고, preHandle() 내부에서 다른 페이지로 유도...


▶ 메인페이지(main.jsp)에 HandlerInterceptor 링크 설치

	<li><a href="<c:url value='/admin/handlerInterceptor'/>">HandlerInterceptor</a></li>


▶ Controller 에 /admin/handlerInterceptor GetMapping 만들기 

	@GetMapping("/handlerInterceptor")
	public String handlerInterceptor() {
		return "/admin/handlerInterceptor";
	}

▶ /admin/handlerInterceptor.jsp 만들기

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>HandlerInterceptor OK!!!</h1>
	<a href="<c:url value='/admin/listupAdmin'/>">ADMIN LIST로 이동하기</a>
</body>
</html>


▶ kr.co.zzz 아래에 LoginInterceptor 클래스 생성
 - kr.co.zzz 마우스 오른쪽 버튼 New Java Class > 중간 Superclass > [Borwse...] 클릭
 - HandlerInterceptorAdapter 클래스 상속하도록 설정
 - 생성된 클래스 화면에서 마우스 우클릭 > Source > Override/Implement Methods 선택
 - preHandle(HttpServletRequest, HttpServletResponse, Object) 선택

▶ 코드 작성

public class LoginInterceptor extends HandlerInterceptorAdapter {

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		HttpSession session = request.getSession(false);
		
		if(session != null) {
			Object object = session.getAttribute("adminLoginedDto");
			if(object != null) {
				return true;
			}
		}
		response.sendRedirect(request.getContextPath() + "/admin/loginForm");
		return false;
	}
}

▶ 특정 컨트롤러에서 동작하게 만들어야 하므로 servlet-context.xml에 기능을 추가하기

	<interceptors>
		<interceptor>
			<mapping path="/admin/handlerInterceptor" />
			<beans:bean class="kr.co.zzz.LoginInterceptor" />
		</interceptor>
	</interceptors>

## <mapping path="/admin/handlerInterceptor" /> : 인터셉터할 컨트롤러 요청 url
## <beans:bean class="kr.co.zzz.LoginInterceptor" /> : 인터셉터 클래스가 정의된 위치와 클래스명

▶ 테스트하기

▶ 다른 곳에 지정하려면....
 ⓐ 해당 세션 유지 로직이 들어있는 컨트롤러로 가서 해당 위치... 주석...
 ⓑ servlet-context.xml에 등록


14. 폼의 자바스크립트와 css 적용

※ 폼 내부에 스크립트 위치 시키기 -- 로그인 폼(login_form.jsp)
ⓐ jquery cdn에서 링크 복사 붙여넣기

<script src="https://code.jquery.com/jquery-3.7.1.min.js"
	integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
	crossorigin="anonymous"></script>

ⓑ 버튼 코드 수정하기(submit > button)

<h2>Login Form</h2>
<input type="button" value="longin" id="btn_login"> 

ⓒ body 태그 하단에 <script></script> 태그 넣고 코드 작성하기

<script>
	$("#btn_login").on("click", function(){
		if ($("#a_id").val().trim() == "") {
			alert("INPUT ADMIN ID.");
			$("#a_id").focus();
		} else if ($("#a_pw").val().trim() == "") {
			alert("INPUT ADMIN PW.");
			$("#a_pw").focus();
		} else {
			$("#login_form").submit();
		}
	});
</script>


※ src/main/webapp/resources/js 하고 css 폴더 만들기
▶ 톰캣 실행경로를 읽어와서 실행되도록 처리하기
ⓐ jsp 파일 상단에 
  <c:set var="path" value="${pageContext.request.contextPath}" />
--- 이렇게 처리하면 나중에 톰캣의 기본 시작 컨트롤러의 위치가 바뀌어도 코드 수정없이
    동작함.
--- 유지보수가 용이하다.

ⓑ 해당 폴더에 test.js와 test.css 파일 만들기

--- test.js : alert('test')

--- test.css

h2 {
	color : red;
}

ⓒ 링크 넣기

<script src="${path}/resources/js/test.js"></script>
<link href="${path}/resources/css/test.css" rel="stylesheet" />

ⓓ 실행하기

※ login_form.js 작성하기

$(document).ready(function(){
	$("#btn_login").on("click", function(){
		if ($("#a_id").val().trim() == "") {
			alert("INPUT ADMIN ID.");
			$("#a_id").focus();
		} else if ($("#a_pw").val().trim() == "") {
			alert("INPUT ADMIN PW.");
			$("#a_pw").focus();
		} else {
			$("#login_form").submit();
		}
	});
})



>>>> 문제_1
▶ 현재 도서등록과 전체 도서 리스트를 확인하는 메뉴가 있음.

1) 도서등록을 위한 테이블을 다음과 같이 생성
- table name : book
- dto : BookDto
- controller, service, mapper : BookOOOOOO
- bookmapper Query : book_sql.xml

▶ filed 
- 도서명 : b_name
- 저자 : b_author
- 출판사 : b_publisher
- ISBN : b_isbn

2) 위 테이블을 구성한 후 도서등록, 수정, 삭제, 리스트보기를 수행하는 내용을 프로그램 하시오.

>>>> 문제_2

1) 사용자(회원)을 위한 테이블을 다음과 같이 생성
- table name : user
- dto : UserDto
- controller, service, mapper : UserOOOOOO
- bookmapper Query : user_sql.xml

▶ filed 
- 사용자명 : u_name
- password : u_pw
- 전화번호 : u_phone
- 이메일 : u_email

2) 회원가입, 계정 수정 작업을 처리하고 admin 계정 화면에서 회원정보를 확인하는 화면을 구현하시오.
